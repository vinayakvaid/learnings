There are three main ways of combining data frames together-

Concatenation
	Concatenation basically glues together DataFrames. Keep in mind that dimensions should match along the axis you are concatenating on. You can use pd.concat and pass in a list of DataFrames to concatenate together.
	
	> 	import pandas as pd
		df1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],
								'B': ['B0', 'B1', 'B2', 'B3'],
								'C': ['C0', 'C1', 'C2', 'C3'],
								'D': ['D0', 'D1', 'D2', 'D3']},
								index=[0, 1, 2, 3])

		df2 = pd.DataFrame({'A': ['A4', 'A5', 'A6', 'A7'],
								'B': ['B4', 'B5', 'B6', 'B7'],
								'C': ['C4', 'C5', 'C6', 'C7'],
								'D': ['D4', 'D5', 'D6', 'D7']},
								 index=[4, 5, 6, 7])

		df3 = pd.DataFrame({'A': ['A8', 'A9', 'A10', 'A11'],
								'B': ['B8', 'B9', 'B10', 'B11'],
								'C': ['C8', 'C9', 'C10', 'C11'],
								'D': ['D8', 'D9', 'D10', 'D11']},
								index=[8, 9, 10, 11])

		print(df1)
		print(df1)
		print(df1)
		print("*****************")
		print(pd.concat([df1,df2,df3]))
		
		output-
		    A   B   C   D
		0  A0  B0  C0  D0
		1  A1  B1  C1  D1
		2  A2  B2  C2  D2
		3  A3  B3  C3  D3
			A   B   C   D
		0  A0  B0  C0  D0
		1  A1  B1  C1  D1
		2  A2  B2  C2  D2
		3  A3  B3  C3  D3
			A   B   C   D
		0  A0  B0  C0  D0
		1  A1  B1  C1  D1
		2  A2  B2  C2  D2
		3  A3  B3  C3  D3
		*****************
			  A    B    C    D
		0    A0   B0   C0   D0
		1    A1   B1   C1   D1
		2    A2   B2   C2   D2
		3    A3   B3   C3   D3
		4    A4   B4   C4   D4
		5    A5   B5   C5   D5
		6    A6   B6   C6   D6
		7    A7   B7   C7   D7
		8    A8   B8   C8   D8
		9    A9   B9   C9   D9
		10  A10  B10  C10  D10
		11  A11  B11  C11  D11
		
		
	> You can see by default, it concatenates on 0 axis or rows but we can also specify to concatenate on columns by specifying the axis but make sure data is present other wise , it will insert NaN values where ever data is not there.
		
		print(pd.concat([df1,df2,df3],axis=1))
		
		output-
		      A    B    C    D    A    B    C    D    A    B    C    D
		0    A0   B0   C0   D0  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
		1    A1   B1   C1   D1  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
		2    A2   B2   C2   D2  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
		3    A3   B3   C3   D3  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN
		4   NaN  NaN  NaN  NaN   A4   B4   C4   D4  NaN  NaN  NaN  NaN
		5   NaN  NaN  NaN  NaN   A5   B5   C5   D5  NaN  NaN  NaN  NaN
		6   NaN  NaN  NaN  NaN   A6   B6   C6   D6  NaN  NaN  NaN  NaN
		7   NaN  NaN  NaN  NaN   A7   B7   C7   D7  NaN  NaN  NaN  NaN
		8   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   A8   B8   C8   D8
		9   NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN   A9   B9   C9   D9
		10  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  A10  B10  C10  D10
		11  NaN  NaN  NaN  NaN  NaN  NaN  NaN  NaN  A11  B11  C11  D11
		
	
Merging
	The merge function allows you to merge DataFrames together using a similar logic as merging SQL Tables together.
	
	> Simple merging	
		import pandas as pd
		left = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
							 'A': ['A0', 'A1', 'A2', 'A3'],
							 'B': ['B0', 'B1', 'B2', 'B3']})

		right = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3'],
							  'C': ['C0', 'C1', 'C2', 'C3'],
							  'D': ['D0', 'D1', 'D2', 'D3']})

		print(left)
		print(right)
		print("*****************")
		print(pd.merge(left,right,how="inner",on="key")) ----> we can also use how="outer" which works same way as SQL inner and outer
		
		output-
		  key   A   B
		0  K0  A0  B0
		1  K1  A1  B1
		2  K2  A2  B2
		3  K3  A3  B3
		  key   C   D
		0  K0  C0  D0
		1  K1  C1  D1
		2  K2  C2  D2
		3  K3  C3  D3
		*****************
		  key   A   B   C   D
		0  K0  A0  B0  C0  D0
		1  K1  A1  B1  C1  D1
		2  K2  A2  B2  C2  D2
		3  K3  A3  B3  C3  D3
		
	
	> One more complicated example -
		import pandas as pd
		left = pd.DataFrame({'key1': ['K0', 'K0', 'K1', 'K2'],
							 'key2': ['K0', 'K1', 'K0', 'K1'],
							 'A': ['A0', 'A1', 'A2', 'A3'],
							 'B': ['B0', 'B1', 'B2', 'B3']})

		right = pd.DataFrame({'key1': ['K0', 'K1', 'K1', 'K2'],
							  'key2': ['K0', 'K0', 'K0', 'K0'],
							  'C': ['C0', 'C1', 'C2', 'C3'],
							  'D': ['D0', 'D1', 'D2', 'D3']})

		print(left)
		print(right)
		print("*****************")
		pd.merge(left, right, on=['key1', 'key2'])	------> observe carefully this example
	
		output-
		  key1 key2   A   B
		0   K0   K0  A0  B0
		1   K0   K1  A1  B1
		2   K1   K0  A2  B2
		3   K2   K1  A3  B3
		  key1 key2   C   D
		0   K0   K0  C0  D0
		1   K1   K0  C1  D1
		2   K1   K0  C2  D2
		3   K2   K0  C3  D3
		*****************
		  key1 key2   A   B   C   D
		0   K0   K0  A0  B0  C0  D0
		1   K1   K0  A2  B2  C1  D1
		2   K1   K0  A2  B2  C2  D2
		
		
	> We can also user outer, right and left as below
		print(pd.merge(left, right, how='outer', on=['key1', 'key2']))
		
		output-
		  key1 key2    A    B    C    D
		0   K0   K0   A0   B0   C0   D0
		1   K0   K1   A1   B1  NaN  NaN
		2   K1   K0   A2   B2   C1   D1
		3   K1   K0   A2   B2   C2   D2
		4   K2   K1   A3   B3  NaN  NaN
		5   K2   K0  NaN  NaN   C3   D3
		
	> Right - 
		print(pd.merge(left, right, how='right', on=['key1', 'key2']))
		
		output-
		  key1 key2    A    B   C   D
		0   K0   K0   A0   B0  C0  D0
		1   K1   K0   A2   B2  C1  D1
		2   K1   K0   A2   B2  C2  D2
		3   K2   K0  NaN  NaN  C3  D3
		
	> Left - 
		print(pd.merge(left, right, how='left', on=['key1', 'key2']))
		
		output-
		  key1 key2   A   B    C    D
		0   K0   K0  A0  B0   C0   D0
		1   K0   K1  A1  B1  NaN  NaN
		2   K1   K0  A2  B2   C1   D1
		3   K1   K0  A2  B2   C2   D2
		4   K2   K1  A3  B3  NaN  NaN
		
		
Joining
	Joining is a convenient method for combining the columns of two potentially differently-indexed DataFrames into a single result DataFrame.
	Joining is similar to merge, the difference is its joins on index where merge joins based on column
	
	> Data frames can be joined as below
		import pandas as pd
		left = pd.DataFrame({'A': ['A0', 'A1', 'A2'],
							 'B': ['B0', 'B1', 'B2']},
							  index=['K0', 'K1', 'K2'])

		right = pd.DataFrame({'C': ['C0', 'C2', 'C3'],
							'D': ['D0', 'D2', 'D3']},
							  index=['K0', 'K2', 'K3'])

		print(left)
		print(right)
		print("*****************")
		print(left.join(right))
		
		output-
		     A   B
		K0  A0  B0
		K1  A1  B1
		K2  A2  B2
			 C   D
		K0  C0  D0
		K2  C2  D2
		K3  C3  D3
		*****************
			 A   B    C    D
		K0  A0  B0   C0   D0
		K1  A1  B1  NaN  NaN
		K2  A2  B2   C2   D2
		
	
	> Or some complex joinings can be
		import pandas as pd
		left = pd.DataFrame({'A': ['A0', 'A1', 'A2'],
							 'B': ['B0', 'B1', 'B2']},
							  index=['K0', 'K1', 'K2'])

		right = pd.DataFrame({'C': ['C0', 'C2', 'C3'],
							'D': ['D0', 'D2', 'D3']},
							  index=['K0', 'K2', 'K3'])

		print(left)
		print(right)
		print("*****************")
		print(left.join(right,how="outer"))
		
		output-
		     A   B
		K0  A0  B0
		K1  A1  B1
		K2  A2  B2
			 C   D
		K0  C0  D0
		K2  C2  D2
		K3  C3  D3
		*****************
			  A    B    C    D
		K0   A0   B0   C0   D0
		K1   A1   B1  NaN  NaN
		K2   A2   B2   C2   D2
		K3  NaN  NaN   C3   D3
	