NumPy Tutorials

NumPy - it is a linear algebra library for python and all most all libraries in python ecosystem rely on numpy as bulding blocks
		and also it is incredibly fast since it has bindngs to C libraries
		
NumPy Arrays
	it comes in two flavours - vectors (1-d) and matrices (2-d) (but matrix can still have only one row or one column)
	We can cast python objects into arrays such as lists as below
		
		import numpy as np

		list = [1,2,3]						
		list1 = [[1,2,3],[4,5,6],[7,8,9]] 
		print(list)

		arr = np.array(list)				-------> 1-d array 
		print(arr)
		
		arr1 = np.array(list1)				-------> 2-d array
		print(arr1)
	output:
		[1, 2, 3]
		[1 2 3]
		[[1 2 3]
		 [4 5 6]
		 [7 8 9]]
		 
	We can also use numpy's internal methods to generate arrays as
	
		numpy.arange(start, stop, step) -
			import numpy as np
			print(np.arange(0,11,2))	 -----> [ 0  2  4  6  8 10] evenly spaced values separated by step size where third argument step size is optional
			
		numpy.zeros(size) - 
			import numpy as np
			print(np.zeros(3))
			print(np.zeros((2,3)))		------> pass tuple if you want 2-d array and single number if you want 1-d array
			
			[0. 0. 0.]
			[[0. 0. 0.]
			 [0. 0. 0.]]
			 
		numpy.ones(size)	 			------> similar to zeros will produce an array of ones
		
		numpy.linspace(start,stop,numbers)
			import numpy as np
			print(np.linspace(0,3,5))	------> will produce 1-d array of that many numbers which you have specified in the third argument
			
			[0.   0.75 1.5  2.25 3.  ] 	------> it is different from arange function since arnage function takes step as argument and returns evenly spaced numbers between
												the two numbers with that step size
												
		numpy.eye(size)					-------> will produce an identity matrix of dimension mentioned in arguments
		
		numpy.random.rand(size)				-------> returns an array of size mentioned of numbers between -1 and 1 over uniform distribution
			print(np.random.rand(4,4))		-------> if we want 2-d array just pass the size, no need to pass a tuple of numbers
			
		numpy.random.randn(size)			-------> returns an array of size mentioned of numbers between -1 and 1 over normal distribution
		
		numpy.random.randint(low,high,size)	--------> returns an array of random numners between low (inclusive) and high (exclusive) numbers of size specified by argument
			import numpy as np
			print(np.random.randint(-100,100,10))
			
			[ 84 -48  91  95 -27   1   6  29 -92  50]
			
			
	Some important attributes and methods of arrays
		
		arr.reshape() - 
			import numpy as np
			arr = np.arange(0,25)
			print(arr)
			arr = arr.reshape(5,5)			----> reshaped array into new size but note that the new size should take all the elements in original array, no more or less
			print(arr)
		
			[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
			 24]
			[[ 0  1  2  3  4]
			 [ 5  6  7  8  9]
			 [10 11 12 13 14]
			 [15 16 17 18 19]
			 [20 21 22 23 24]]
		 
		arr.max() 					-----> returns the maximum value in the array
		
		arr.min() 					-----> returns the minimun value in the array
		
		arr.argmax()				-----> returns the index of the maximum value starting from zero
			import numpy as np
			arr = np.random.randint(0,35,10)
			print(arr)
			print(arr.argmax())
				
			[ 0  5 12 12  0  0 16 11  8 10]
			6
		
		arr.argmin() 				-----> returns the index of the minimun value starting from zero
		
		arr.shape					-----> returns the shape or size of any array , note there are no parantheses
											for 1-d, shape = (25,) and for 2-d, shape = (5,5)
											
		arr.dtype					-----> returns the data type of the elements in the array

		
NumPy Array Indexing

	import numpy as np
	arr = np.arange(2,12)
	print(arr)						------> [ 2  3  4  5  6  7  8  9 10 11]
	print(arr[8])					------> 10
	print(arr[2:5])					------> [4 5 6] ( to get values of index in range)
	print(arr[:4])					------> [2 3 4 5] ( to get all the values starting from index 0 to the specified index)
	print(arr[5:])					------> [ 7  8  9 10 11] (start at particular index and till end)
	
	> NumPy Arrays difffer from normal python lists due to their ability to broadcast
		If we have got a new array by using slicing notation and we reset elements in the sliced array, it will automatically change the elements
		in the original array as well. The numpy does this in order to avoid memory issues in case of large arrays, so you can use .copy() method to 
		explicitly specify copy of original array and make changes in the copied array
	
		print(arr)
		sliced_arr = arr[2:5]
		print(sliced_arr)
		sliced_arr[:] = 100
		print(sliced_arr)
		print(arr)
		
		[ 2  3  4  5  6  7  8  9 10 11]
		[4 5 6]
		[100 100 100]
		[  2   3 100 100 100   7   8   9  10  11]
		
	> Accessing values using index from a 2-d array
		We have two notaions, one is double bracket notation and second is singele bracket with comma notation
		
		import numpy as np
		arr = np.array([[3,4,5],[4,6,8],[9,0,1]])
		print(arr)
		print(arr[1][2])
		
		[[3 4 5]
		 [4 6 8]
		 [9 0 1]]
		8
		
		print(arr[1])				------> [4 6 8] (This will give me the entire second row since it is at the index 1)
		
		print(arr[1,2])				------> 8 ( by using comma notation)
		
	
	> Accessing sub matrices or sub sections from 2-D array
		import numpy as np
		arr = np.array([[3,4,5],[4,6,8],[9,0,1]])
		print(arr)
		print()
		print(arr[:2])
		print(arr[:,1:])
		print()
		print(arr[:2,1:])
		
		[[3 4 5]
		 [4 6 8]
		 [9 0 1]]

		[[3 4 5]
		 [4 6 8]]

		[[4 5]
		 [6 8]
		 [0 1]]

		[[4 5]
		 [6 8]]
		 
		 
		import numpy as np
		arr = np.array([[3,4,5],[4,6,8],[9,0,1]])
		print(arr)
		print()
		print(arr[:,0:1])
		
		[[3]
		 [4]
		 [9]]
		 
		 
	> Conditional Indexing
		import numpy as np
		arr = np.arange(4,15)
		print(arr)
		bool_arr = arr >= 7			----> while create a boolean array
		print(bool_arr)				----> using boolean array to access elements
		print(arr[bool_arr])		----> will only return those instance where boolean array has value true
		
		[ 4  5  6  7  8  9 10 11 12 13 14]
		[False False False  True  True  True  True  True  True  True  True]
		[ 7  8  9 10 11 12 13 14]
		
		We can also do all this in one step as - arr[arr>=7]
		
	> Using .reshape() method to reshape our 1-D arrays
		import numpy as np
		arr = np.arange(50).reshape(5,10)			-----> will reshape our 1-D array into 2-D array of 5 rows and 10 columns
		print(arr)
		print(arr[3:,2:5])							-----> using slice notation to get a chunk of 2-D array
		
		[[ 0  1  2  3  4  5  6  7  8  9]
		 [10 11 12 13 14 15 16 17 18 19]
		 [20 21 22 23 24 25 26 27 28 29]
		 [30 31 32 33 34 35 36 37 38 39]
		 [40 41 42 43 44 45 46 47 48 49]]
		[[32 33 34]
		 [42 43 44]]
		 

NumPy Operations

	> Array with Array operations
		
		