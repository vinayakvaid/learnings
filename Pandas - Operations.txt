Operations
	We will look into some imp operations which we havent seen yet
	
	> .unique() method - gives you a numpy array of unique values in a column
		df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})
		df.head()
		print(df)
		print(df["col2"].unique())
		
		output-
		   col1  col2 col3
		0     1   444  abc
		1     2   555  def
		2     3   666  ghi
		3     4   444  xyz
		[444 555 666]
		
	
	> .nunique() method - gives you the count of unique values in a column
		print(df["col2"].nunique())
		
		output-
		3
		
		
	> .value_count() method - gives you the number of occurences of each unique value in a column
		print(df["col2"].value_counts())
		
		output-
		444    2
		555    1
		666    1
		Name: col2, dtype: int64
		
		
	> We can also use our custom or inbuilt functions and apply it to each element in a column
		def times(x):
			return x*2

		import pandas as pd
		df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})
		df.head()
		print(df)
		print(df["col2"].apply(times)) -----> we can see we have broadcasted our custom function to each value of the mentioned column
		
		output-
		   col1  col2 col3
		0     1   444  abc
		1     2   555  def
		2     3   666  ghi
		3     4   444  xyz
		0     888
		1    1110
		2    1332
		3     888
		Name: col2, dtype: int64
		
		
		print(df["col3"].apply(len)) ------> We can also use inbuilt functions with apply() method
			0    3
			1    3
			2    3
			3    3
			Name: col3, dtype: int64
			
		
		We can even use lambda expression in the apply() method
			print(df["col1"].apply(lambda x:x*2))
			
			
	> Dropping a column
		df = df.drop("col1",axis=1)
		
	
	> Getting the column names and index names
		import pandas as pd
		df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})
		df.head()
		print(df)
		print(df.columns)
		print(df.index)
		
		output-
		   col1  col2 col3
		0     1   444  abc
		1     2   555  def
		2     3   666  ghi
		3     4   444  xyz
		Index(['col1', 'col2', 'col3'], dtype='object')
		RangeIndex(start=0, stop=4, step=1) 			-----> Since its a range index
		
		
	> Sorting a particular column 
		import pandas as pd
		df = pd.DataFrame({'col1':[1,2,3,4],'col2':[444,555,666,444],'col3':['abc','def','ghi','xyz']})
		df.head()
		print(df)
		print(df.sort_values("col2"))
		
		output-
		   col1  col2 col3
		0     1   444  abc
		1     2   555  def
		2     3   666  ghi
		3     4   444  xyz
		   col1  col2 col3
		0     1   444  abc
		3     4   444  xyz
		1     2   555  def
		2     3   666  ghi -----> please note here, the index remains intact with the row even after sorting
		
	
	> To find if null values present in data frame, it gives you the data frame of boolean values corresponding to whether null value is present or not
		print(df.isnull())
		
		output-
		    col1   col2   col3
		0  False  False  False
		1  False  False  False
		2  False  False  False
		3  False  False  False
		
		
	> Pivot table - same as excel
		import pandas as pd
		data = {'A':['foo','foo','foo','bar','bar','bar'],
			 'B':['one','one','two','two','one','one'],
			   'C':['x','y','x','y','x','y'],
			   'D':[1,3,2,5,4,1]}

		df = pd.DataFrame(data)
		print("***********************")
		print(df.pivot_table(values="D",index=["A","B"],columns="C"))
		
		output-
		     A    B  C  D
		0  foo  one  x  1
		1  foo  one  y  3
		2  foo  two  x  2
		3  bar  two  y  5
		4  bar  one  x  4
		5  bar  one  y  1
		***********************
		C          x    y
		A   B            
		bar one  4.0  1.0
			two  NaN  5.0
		foo one  1.0  3.0
			two  2.0  NaN